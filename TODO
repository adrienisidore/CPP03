#include "DiamondTrap.class.hpp"

//ATTENTION

DiamondTrap::DiamondTrap() : ClapTrap("Default_clap_name"), _name("Default") {
	std::cout << "DiamondTrap default constructor called\n";
	_hitpoint = 100;      // from FragTrap : peut on faire hériter directement sans devoir réécrire ?
	_energypoint = 50;    // from ScavTrap
	_attackdamage = 30;   // from FragTrap
}

//DiamondTrap n'a pas le même nom que ses parents (Frag et SCav) et de son grand parent (Clap)
//ClapTrap(name + "_clap_name"), FragTrap(name + "_frag_name"), ScavTrap(name + + "_scav_name"), _name(name)
DiamondTrap::DiamondTrap(std::string name)
	: ClapTrap(name + "_clap_name"), FragTrap(name), ScavTrap(name), _name(name) {
	std::cout << "DiamondTrap constructor called for " << _name << "\n";
	_hitpoint = 100;
	_energypoint = 50;
	_attackdamage = 30;
}

DiamondTrap::DiamondTrap(const DiamondTrap &copy)
	: ClapTrap(copy), FragTrap(copy), ScavTrap(copy), _name(copy._name) {
	std::cout << "DiamondTrap copy constructor called\n";
}

DiamondTrap &DiamondTrap::operator=(const DiamondTrap &rhs) {
	if (this != &rhs) {
		ClapTrap::operator=(rhs);
		_name = rhs._name;
	}
	std::cout << "DiamondTrap assignment operator called\n";
	return *this;
}

DiamondTrap::~DiamondTrap() {
	std::cout << "DiamondTrap destructor called for " << _name << "\n";
}

void DiamondTrap::whoAmI() {
	std::cout << "I am " << _name << " and my ClapTrap name is " << ClapTrap::_name << "\n";
}


| Flag          | Explication                                                                                                      |
| ------------- | ---------------------------------------------------------------------------------------------------------------- |
| `-Wshadow`    | Affiche un **warning** quand une variable **cache (shadow)** une autre du même nom dans une portée plus globale. |
| `-Wno-shadow` | Supprime ce warning (⚠️ à ne pas abuser).                                                                        |
